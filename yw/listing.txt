######################################################################
@begin clean_name_date_log
@in input1_data @uri file:{input1_data_file_name}
@in localDB_data @uri {localDB_data_file_name}
@out log1_data @uri file:{log1_data_file_name}
@out output2_data  @uri file:{output2_data_file_name}
@out log2_data @uri file:{log2_data_file_name}
@begin name_val
@in localDB_data @uri {localDB_data_file_name}
@in input1_data @uri file:{input1_data_file_name}
@out output1_data  @uri file:{output1_data_file_name}
@out log1_data @uri file:{log1_data_file_name}
create log file
@log {timestamp} Reading input records from {input1_data_file_name}
@begin read_records_from_localDB
@in localDB_data @uri {localDB_data_file_name}
@call fuzzymatch
@out localDB_scientificName_lst
create CSV reader for localDB records
fieldnames/keys of original input data (dictionary)
find corresponding column position for specified header
iterate over localDB data records
find values of specific fields
@end read_records_from_localDB
@begin read_input1_data_records
@in input1_data @uri file:{input1_data_file_name}
@out original1_record
@out record_num @as record_id
create CSV reader for input records
iterate over input data records
open file for storing output data if not already open
@log {timestamp} Reading input record {record_id}
@end read_input1_data_records
@begin extract_scientificName_and_authorship
@in original1_record
@out original_scientificName
@out original_authorship
extract values of fields to be validated
@end extract_scientificName_and_authorship
@begin find_matching_localDB_record
@in original_scientificName
@in localDB_scientificName_lst
@call exactmatch
@OUT matching_localDB_record
first try exact match of the scientific name against localDB
@log {timestamp} Trying localDB EXACT match for scientific name: {original_scientificName}
@log {timestamp} localDB EXACT match was SUCCESSFUL
otherwise try a fuzzy match
@log {timestamp} EXACT match FAILED.
@log {timestamp} Trying localDB FUZZY match for scientific name: {original_scientificName}
@log {timestamp}  localDB FUZZY match FAILED.
@end find_matching_localDB_record
########################################################
reject the currect record if not matched successfully against localDB
@log {timestamp} REJECTED record {record_id}
write output record to output file
skip to processing of next record in input file
############################################################
@begin update_scientificName
@in original_scientificName
@in matching_localDB_record
@out updated_scientificName
get scientific name from localDB record if the taxon name match was fuzzy
@end update_scientificName
####################################################################
@begin update_authorship
@in matching_localDB_record
@in original_authorship
@out updated_authorship
get the scientific name authorship from the localDB record if different from input record
@end update_authorship
####################################################################
@begin compose_output1_record
@in updated_scientificName
@in updated_authorship
@out output1_record
@log {timestamp} UPDATING scientific name from {original_scientificName} to {updated_scientificName}
@log {timestamp} UPDATING scientific name authorship from {original_authorship} to {updated_authorship}
@end compose_output1_record
####################################################################
@begin write_output_data
@in output1_record
@in record_num @as record_id
@out output1_data  @uri file:{output1_data_file_name}
@out log1_data @uri file:{log1_data_file_name}
@log {timestamp} ACCEPTED record {record_id}
write output record to output file
@end write_output_data
@log {timestamp} Wrote {accepted_record_count} accepted records to {output1_data_file_name}
@log {timestamp} Wrote {rejected_record_count} rejected records to {output1_data_file_name}
@end name_val
@begin date_val
@in output1_data  @uri file:{output1_data_file_name}
@out output2_data  @uri file:{output2_data_file_name}
@out log2_data @uri file:{log2_data_file_name}
create log file
@log {timestamp} Reading input records from {input2_data_file_name}
create CSV reader for input records
@begin read2_input_data_records
@in input2_data  @uri file:{output1_data_file_name}
@out original2_record
iterate over input data records
open file for storing output data if not already open
@log {timestamp} Reading input record {record2_id}
@end read2_input_data_records
extract values of fields to be validated
@begin extract_eventDate
@in original2_record
@out original2_eventDate
@end extract_eventDate
@begin clean_eventDate
@in original2_eventDate
@out log2_data @uri file:{log2_data_file_name}
@out output2_data  @uri file:{output2_data_file_name}
reject the currect record if no value
@log {timestamp} Trying validating event date: {original2_eventDate}
@log {timestamp} Checking ISO date format (YYYY-MM-DD) for event date: '{original2_eventDate}'
date format: xxxx-xx-xx
date format: xxxx-xx-xx/xxxx-xx-xx
date format: xx/xx/xx
@log {timestamp} Not compliant with ISO date format.
@log {timestamp} Not compliant with ISO date format.
@log {timestamp} REJECTED record {record2_id}
write output record to output file
skip to processing of next record in input file
@log {timestamp} Converting event date format from '{original2_eventDate}' to '{updated2_eventDate}'
@log {timestamp} ACCEPTED record {record2_id}
@log {timestamp} Compliant with ISO date format.
@log {timestamp} ACCEPTED record record2_id.
@end clean_eventDate
@log {timestamp} Wrote {accepted2_record_count} accepted records to {output2_data_file_name}
@log {timestamp} Wrote {rejected2_record_count} rejected records to {rejected2_data_file_name}
@end date_val
@end clean_name_date_log
@begin exactmatch
@param lst
@param label_str
@return key
@return None
@end exactmatch
@begin fuzzymatch
@param lst
@param label_str
@return mat_dict
@end fuzzymatch
@begin timestamp
@param message
@return timestamp_message
@end timestamp
Demo of clean_name_date_log script
