
% FACT: check_type(check_type_id, check_type_name).
check_type(1, 'self check').
check_type(2, 'external check').

% FACT: self_check_type(check_type_id, self_check_tpye_id, self_check_type_name).
self_check_type(1, 1, 'text standard').
self_check_type(1, 2, 'date standard').
self_check_type(1, 3, 'time standard').
self_check_type(1, 4, 'number standard').
self_check_type(1, 5, 'authorship standard').


% FACT: external_check_type(check_type_id, external_check_tpye_id, external_check_type_name).
external_check_type(2, 1, 'local source).
external_check_type(2, 2, 'remote source).

% FACT: source_used(external_check_type_name, source_used_id, source_used_name).
source_used('local source', 1, 'local_authority_source').
source_used('remote source', 2, 'remote_authority_source').


% FACT: match_method(match_method_id, match_method_name).
match_method(1, 'EXACT'}.
match_method(2, 'FUZZY'}.


% FACT: match_result(match_result_id, match_result_name).
match_result(1, 'SUCESSFUL').
match_result(2, 'FAILED').

% FACT: final_result(final_result_id, final_result_name).
final_result(1, 'UNABLE to determine the validity').
final_result(2, 'ACCEPTED').

% FACT: field_name(field_name_id, field_name_value).
field_name(1,'catalogNumber').
field_name(2,'scientificName').
field_name(3,'scientificNameAuthorship').
field_name(4,'specificEpithet').
field_name(5,'genus').
field_name(6,'family').
field_name(7,'order').
field_name(8,'class').
field_name(9,'phylum').
field_name(10,'kingdom').
field_name(11,'recordedBy').
field_name(12,'eventDate').
field_name(13,'verbatimEventDate').
field_name(14,'locality').
field_name(15,'stateProvince').
field_name(16,'country').
field_name(17,'higherGeography').



% FACT: log_annotation(annotation_id, source_id, line_number, tag, keyword, value)
log_annotation(201, 1, 40, "log", "@log", "{timestamp} Reading input records from {input1_data_file_name}").
log_annotation(202, 1, 114, "log", "@log", "{timestamp} Reading input record {original_catalogNumber}").
log_annotation(203, 1, 134, "log", "@log", "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}").
log_annotation(204, 1, 141, "log", "@log", "{timestamp} {match_method} match was {match_result}").
log_annotation(205, 1, 149, "log", "@log", "{timestamp} {match_method} match was {match_result}").
log_annotation(206, 1, 150, "log", "@log", "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}").
log_annotation(207, 1, 157, "log", "@log", "{timestamp} {match_method} match was {match_result}").
log_annotation(208, 1, 162, "log", "@log", "{timestamp} {match_method} match was {match_result}").
log_annotation(209, 1, 173, "log", "@log", "{timestamp} {final_result} record {original_catalogNumber}").
log_annotation(210, 1, 222, "log", "@log", "{timestamp} UPDATING {field_name} from {original_scientificName} to {updated_scientificName}").
log_annotation(211, 1, 230, "log", "@log", "{timestamp} UPDATING {field_name} from {original_authorship} to {updated_authorship}").
log_annotation(212, 1, 247, "log", "@log", "{timestamp} {final_result} the record {original_catalogNumber}").
log_annotation(213, 1, 272, "log", "@log", "{timestamp} Wrote {accepted_record_count} {final_result} records to {output1_data_file_name}").
log_annotation(214, 1, 273, "log", "@log", "{timestamp} Wrote {accepted_record_count} {final_result} records to {output1_data_file_name}").

% FACT: log_template(log_template_id, template_tag, template_text)
log_template(1, "reading_file_template", "{timestamp} Reading input records from {input1_data_file_name}').
log_template(2, "reading_record_template", "{timestamp} Reading input record {original_catalogNumber}").
log_template(3, "trying_match_template", "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}").
log_template(4, "matching_result_template", "{timestamp} {match_method} match was {match_result}"). 
log_template(5, "record_final_validation_template", "{timestamp} {final_result} record {original_catalogNumber}").
log_template(6, "updating_record_template", "{timestamp} UPDATING {field_name} from {original_value} to {updated_value}").
log_template(7, "log_summary_template", "{timestamp} Wrote {accepted_record_count} ACCEPTED records to {output1_data_file_name}"). 
log_template(8, "log_summary_template", "{timestamp} Wrote {rejected_record_count} UNABLE-to-determine-validity records to {output1_data_file_name}"). 


% FACT: log_entry(log_entry_id, log_template_id,template_connecton???).


% FACT: record_result(record_id, final_result).
record_result("MCZ:Mala:184232", "ACCEPTED").
record_result("MCZ:Mala:223575", "ACCEPTED").
record_result("MCZ:Mala:98960", "ACCEPTED").
record_result("MCZ:Mala:139031", "ACCEPTED").
record_result("MCZ:Mala:223592", "ACCEPTED").
record_result("MCZ:Mala:87168", "ACCEPTED").
record_result("MCZ:Mala:74068", "ACCEPTED").
record_result("MCZ:Mala:74068", "ACCEPTED").
record_result("MCZ:Mala:247327", "UNABLE to determine the validity").
record_result("MCZ:Mala:249963", "UNABLE to determine the validity").

% FACT: record_update(record_id, field_name, old_value, new_value).
record_update("MCZ:Mala:184232", "scientificNameAuthorship", "Gmelin, 1791", "(Gmelin,     1791)").
record_update("MCZ:Mala:98960", "scientificNameAuthorship", " ", "(Gmelin, 1791)").
record_update("MCZ:Mala:223592", "scientificName", "Placopcten magellanicus", "Placopecten magellanicus").
record_update("MCZ:Mala:223592", "scientificNameAuthorship", "Gmellin", "(Gmelin, 1791)").
record_update("MCZ:Mala:74068", "scientificName", "Nodipecten nodsus", "Nodipecten nodosus").
record_update("MCZ:Mala:74068", "scientificName", "Pecten nodosus", "Nodipecten nodosus").

%FACT: validate_provenance(record_id, field_name, check_type, source_used, match_method, match_result). 
validate_provenance("MCZ:Mala:184232", "scientificName", "external check", "local_authority_source", "EXACT").

% RULE:

