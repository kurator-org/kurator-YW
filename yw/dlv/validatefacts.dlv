
% FACT: check_type(check_type_id, check_type_name).
check_type(1, "self check").
check_type(2, "external check").

% FACT: self_check_type(check_type_id, self_check_tpye_id, self_check_type_name).
self_check_type(1, 1, "text standard").
self_check_type(1, 2, "date standard").
self_check_type(1, 3, "time standard").
self_check_type(1, 4, "number standard").
self_check_type(1, 5, "authorship standard").


% FACT: external_check_type(check_type_id, external_check_tpye_id, external_check_type_name).
external_check_type(2, 1, "local source").
external_check_type(2, 2, "remote source").

% FACT: source_used(external_check_type_name, source_used_id, source_used_name).
source_used("local source", 1, "local authority source").
source_used("remote source", 2, "remote authority source").


% FACT: match_method(match_method_id, match_method_name).
match_method(1, "EXACT").
match_method(2, "FUZZY").

% FACT: matching_method(matching_method_id, matching_method_name).
matching_method(1, "EXACT").
matching_method(2, "FUZZY").


% FACT: match_result(match_result_id, match_result_name).
match_result(1, "SUCESSFUL").
match_result(2, "FAILED").

% FACT: final_result(final_result_id, final_result_name).
final_result(1, "UNABLE to determine the validity").
final_result(2, "ACCEPTED").

% FACT: field_name(field_name_id, field_name_value).
field_name(1,"catalogNumber").
field_name(2,"scientificName").
field_name(3,"scientificNameAuthorship").
field_name(4,"specificEpithet").
field_name(5,"genus").
field_name(6,"family").
field_name(7,"order").
field_name(8,"class").
field_name(9,"phylum").
field_name(10,"kingdom").
field_name(11,"recordedBy").
field_name(12,"eventDate").
field_name(13,"verbatimEventDate").
field_name(14,"locality").
field_name(15,"stateProvince").
field_name(16,"country").
field_name(17,"higherGeography").
field_name(18,"RecordID").



% FACT: annotation(annotation_id, source_id, line_number, tag, keyword, value)
annotation(201, 1, 43, "log", "@log", "{timestamp} Reading input records from {input1_data_file_name}").
annotation(202, 1, 97, "log", "@log", "{timestamp} Reading input record {RecordID}").
annotation(203, 1, 139, "log", "@log", "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}").
annotation(204, 1, 140, "log", "@log", "{timestamp} {match_method} match was {match_result}").
% annotation(205, 1, 149, "log", "@log", "{timestamp} {match_method} match was {match_result}").
% annotation(206, 1, 150, "log", "@log", "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}").
% annotation(207, 1, 157, "log", "@log", "{timestamp} {match_method} match was {match_result}").
% annotation(208, 1, 162, "log", "@log", "{timestamp} {match_method} match was {match_result}").
annotation(209, 1, 183, "log", "@log", "{timestamp} {final_result} record {RecordID}").
% annotation(210, 1, 222, "log", "@log", "{timestamp} UPDATING {field_name} from {original_scientificName} to {updated_scientificName}").
% annotation(211, 1, 230, "log", "@log", "{timestamp} UPDATING {field_name} from {original_authorship} to {updated_authorship}").
annotation(215, 1, 243, "log", "@log", "{timestamp} UPDATING {field_name} from {original_value} to {updated_value}").
annotation(212, 1, 270, "log", "@log", "{timestamp} {final_result} record {RecordID}").
annotation(213, 1, 297, "log", "@log", "{timestamp} Wrote {accepted_record_count} ACCEPTED records to {output1_data_file_name}").
annotation(214, 1, 278, "log", "@log", "{timestamp} Wrote {rejected_record_count} UNABLE-to-determine-validity records to {output1_data_file_name}").

% FACT: log_template(log_template_id, port_id, entry_template).
log_template(1, 4, "{timestamp} Reading input records from {input1_data_file_name}").
log_template(2, 9, "{timestamp} Reading input record {RecordID}").
log_template(3, 39, "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}").
log_template(4, 49, "{timestamp} {match_method} match was {match_result}"). 
log_template(5, 83, "{timestamp} {final_result} record {RecordID}").
log_template(6, 35, "{timestamp} UPDATING {field_name} from {original_value} to {updated_value}").
log_template(7, 54, "{timestamp} Wrote {accepted_record_count} ACCEPTED records to {output1_data_file_name}"). 
log_template(8, 33, "{timestamp} Wrote {rejected_record_count} UNABLE-to-determine-validity records to {output1_data_file_name}"). 


% % FACT: log_entry(log_entry_id, log_template_id,template_connecton???).
% FACT: log_entry(log_entry_id, log_template_id).
log_entry(1, 1).

log_entry(2, 2).
log_entry(3, 3).
log_entry(4, 4).
log_entry(5, 6).
log_entry(6, 5).

log_entry(7, 2).
log_entry(8, 3).
log_entry(9, 4).
log_entry(10, 5).

log_entry(11, 2).
log_entry(12, 3).
log_entry(13, 4).
log_entry(14, 3).
log_entry(15, 4).
log_entry(16, 5).

log_entry(17, 2).
log_entry(18, 3).
log_entry(19, 4).
log_entry(20, 6).
log_entry(21, 5).

log_entry(22, 2).
log_entry(23, 3).
log_entry(24, 4).
log_entry(25, 5).

log_entry(26, 2).
log_entry(27, 3).
log_entry(28, 4).
log_entry(29, 3).
log_entry(30, 4).
log_entry(31, 5).

log_entry(32, 2).
log_entry(33, 3).
log_entry(34, 4).
log_entry(35, 3).
log_entry(36, 4).
log_entry(37, 6).
log_entry(38, 6).
log_entry(39, 5).

log_entry(40, 2).
log_entry(41, 3).
log_entry(42, 4).
log_entry(43, 5).

log_entry(44, 2).
log_entry(45, 3).
log_entry(46, 4).
log_entry(47, 3).
log_entry(48, 4).
log_entry(49, 6).
log_entry(50, 5).

log_entry(51, 2).
log_entry(52, 3).
log_entry(53, 4).
log_entry(54, 3).
log_entry(55, 4).
log_entry(56, 6).
log_entry(57, 5).

log_entry(58, 7).
log_entry(59, 8).

% FACT: log_variable(log_variable_id, variable_name, log_template_id).
log_variable(1,"input1_data_file_name", 1).
log_variable(2, "RecordID", 2).
log_variable(3, "check_type", 3).
log_variable(4, "source_used", 3).
log_variable(5, "match_method", 3).
log_variable(6, "field_name", 3).
log_variable(7, "original_scientificName", 3).
log_variable(5, "match_method", 4).
log_variable(8, "match_result", 4). 
log_variable(9, "final_result", 5). 
log_variable(2, "RecordID", 5).
log_variable(6, "field_name", 6).
log_variable(10, "original_value", 6).
log_variable(11, "updated_value", 6).
log_variable(12, "accepted_record_count", 7).
log_variable(13, "output1_data_file_name", 7).
log_variable(14, "rejected_record_count", 8).
log_variable(13, "output1_data_file_name", 8).


% FACT: log_variable_value(log_entry_id, log_variable_id, log_variable_value).
log_variable_value(1, 1, "demo_input.csv").

log_variable_value(2, 2, "25671466").
log_variable_value(3, 3, "local source").
log_variable_value(3, 4, "local authority source").
log_variable_value(3, 5, "EXACT").
log_variable_value(3, 6, "scientificName").
log_variable_value(3, 7, "Placopecten magellanicus").
log_variable_value(4, 5, "EXACT").
log_variable_value(4, 8, "SUCESSFUL").
log_variable_value(5, 6, "scientificNameAuthorship").
log_variable_value(5, 10, "Gmelin, 1791").
log_variable_value(5, 11, "(Gmelin, 1791)").
log_variable_value(6, 9, "ACCEPTED").
log_variable_value(6, 2, "25671466").

log_variable_value(7, 2, "98817547").
log_variable_value(8, 3, "local source").
log_variable_value(8, 4, "local authority source").
log_variable_value(8, 5, "EXACT").
log_variable_value(8, 6, "scientificName").
log_variable_value(8, 7, "Placopecten magellanicus").
log_variable_value(9, 5, "EXACT").
log_variable_value(9, 8, "SUCESSFUL").
log_variable_value(10, 9, "ACCEPTED").
log_variable_value(10, 2, "98817547").

log_variable_value(11, 2, "73601975").
log_variable_value(12, 3, "local source").
log_variable_value(12, 4, "local authority source").
log_variable_value(12, 5, "EXACT").
log_variable_value(12, 6, "scientificName").
log_variable_value(12, 7, "magellanicus placopecten").
log_variable_value(13, 5, "EXACT").
log_variable_value(13, 8, "FAILED").
log_variable_value(14, 3, "local source").
log_variable_value(14, 4, "local authority source").
log_variable_value(14, 5, "FUZZY").
log_variable_value(14, 6, "scientificName").
log_variable_value(14, 7, "magellanicus placopecten").
log_variable_value(15, 5, "FUZZY").
log_variable_value(15, 8, "FAILED").
log_variable_value(16, 9, "UNABLE to determine the validity").
log_variable_value(16, 2, "73601975").

log_variable_value(17, 2, "27888163").
log_variable_value(18, 3, "local source").
log_variable_value(18, 4, "local authority source").
log_variable_value(18, 5, "EXACT").
log_variable_value(18, 6, "scientificName").
log_variable_value(18, 7, "Placopecten magellanicus").
log_variable_value(19, 5, "EXACT").
log_variable_value(19, 8, "SUCESSFUL").
log_variable_value(20, 6, "scientificNameAuthorship").
log_variable_value(20, 10, "").
log_variable_value(20, 11, "(Gmelin, 1791)").
log_variable_value(21, 9, "ACCEPTED").
log_variable_value(21, 2, "27888163").

log_variable_value(22, 2, "25220140").
log_variable_value(23, 3, "local source").
log_variable_value(23, 4, "local authority source").
log_variable_value(23, 5, "EXACT").
log_variable_value(23, 6, "scientificName").
log_variable_value(23, 7, "Placopecten magellanicus").
log_variable_value(24, 5, "EXACT").
log_variable_value(24, 8, "SUCESSFUL").
log_variable_value(25, 9, "ACCEPTED").
log_variable_value(25, 2, "25220140").

log_variable_value(26, 2, "23408786").
log_variable_value(27, 3, "local source").
log_variable_value(27, 4, "local authority source").
log_variable_value(27, 5, "EXACT").
log_variable_value(27, 6, "scientificName").
log_variable_value(27, 7, "").
log_variable_value(28, 5, "EXACT").
log_variable_value(28, 8, "FAILED").
log_variable_value(29, 3, "local source").
log_variable_value(29, 4, "local authority source").
log_variable_value(29, 5, "FUZZY").
log_variable_value(29, 6, "scientificName").
log_variable_value(29, 7, "").
log_variable_value(30, 5, "FUZZY").
log_variable_value(30, 8, "FAILED").
log_variable_value(31, 9, "UNABLE to determine the validity").
log_variable_value(31, 2, "23408786").

log_variable_value(32, 2, "18006440").
log_variable_value(33, 3, "local source").
log_variable_value(33, 4, "local authority source").
log_variable_value(33, 5, "EXACT").
log_variable_value(33, 6, "scientificName").
log_variable_value(33, 7, "Placopcten magellanicus").
log_variable_value(34, 5, "EXACT").
log_variable_value(34, 8, "FAILED").
log_variable_value(35, 3, "local source").
log_variable_value(35, 4, "local authority source").
log_variable_value(35, 5, "FUZZY").
log_variable_value(35, 6, "scientificName").
log_variable_value(35, 7, "Placopcten magellanicus").
log_variable_value(36, 5, "FUZZY").
log_variable_value(36, 8, "SUCESSFUL").
log_variable_value(37, 6, "scientificName").
log_variable_value(37, 10, "Placopcten magellanicus").
log_variable_value(37, 11, "Placopecten magellanicus").
log_variable_value(38, 6, "scientificNameAuthorship").
log_variable_value(38, 10, "Gmellin").
log_variable_value(38, 11, "(Gmelin, 1791)").
log_variable_value(39, 9, "ACCEPTED").
log_variable_value(39, 2, "18006440").

log_variable_value(40, 2, "14319266").
log_variable_value(41, 3, "local source").
log_variable_value(41, 4, "local authority source").
log_variable_value(41, 5, "EXACT").
log_variable_value(41, 6, "scientificName").
log_variable_value(41, 7, "Placopecten magellanicus").
log_variable_value(42, 5, "EXACT").
log_variable_value(42, 8, "SUCCESSFUL").
log_variable_value(43, 9, "ACCEPTED").
log_variable_value(43, 2, "14319266").


log_variable_value(44, 2, "90079875").
log_variable_value(45, 3, "local source").
log_variable_value(45, 4, "local authority source").
log_variable_value(45, 5, "EXACT").
log_variable_value(45, 6, "scientificName").
log_variable_value(45, 7, "Nodipecten nodsus").
log_variable_value(46, 5, "EXACT").
log_variable_value(46, 8, "FAILED").
log_variable_value(47, 3, "local source").
log_variable_value(47, 4, "local authority source").
log_variable_value(47, 5, "FUZZY").
log_variable_value(47, 6, "scientificName").
log_variable_value(47, 7, "Nodipecten nodsus").
log_variable_value(48, 5, "FUZZY").
log_variable_value(48, 8, "SUCESSFUL").
log_variable_value(49, 6, "scientificName").
log_variable_value(49, 10, "Nodipecten nodsus").
log_variable_value(49, 11, "Nodipecten nodosus").
log_variable_value(50, 9, "ACCEPTED").
log_variable_value(50, 2, "90079875").

log_variable_value(51, 2, "17477488").
log_variable_value(52, 3, "local source").
log_variable_value(52, 4, "local authority source").
log_variable_value(52, 5, "EXACT").
log_variable_value(52, 6, "scientificName").
log_variable_value(52, 7, "Pecten nodosus").
log_variable_value(53, 5, "EXACT").
log_variable_value(53, 8, "FAILED").
log_variable_value(54, 3, "local source").
log_variable_value(54, 4, "local authority source").
log_variable_value(54, 5, "FUZZY").
log_variable_value(54, 6, "scientificName").
log_variable_value(54, 7, "Pecten nodosus").
log_variable_value(55, 5, "FUZZY").
log_variable_value(55, 8, "SUCESSFUL").
log_variable_value(56, 6, "scientificName").
log_variable_value(56, 10, "Pecten nodosus").
log_variable_value(56, 11, "Nodipecten nodosus").
log_variable_value(57, 9, "ACCEPTED").
log_variable_value(57, 2, "17477488").

log_variable_value(58, 12, "8").
log_variable_value(58, 13, "demo_output_name_val.csv").
log_variable_value(59, 14, "2").
log_variable_value(59, 13, "demo_output_name_val.csv").

% RULE: unique RecordID
RecordID(X) :- log_variable_value(_, 2, X). 

% RULE: count RecordID
count(W) :- #count{Y: RecordID(Y)} = W. 

% RULE: log_entry_template(log_entry_id, entry_template).
log_entry_template(X, Y) :-
	log_entry(X, Z), log_template(Z, _, Y).

% RULE: log_entry_template_variable(log_entry_id, entry_template, variable_name, log_variable_value).
log_entry_template_variable(X, Y, Z, W) :-
	log_entry(X, U), log_template(U, _, Y), log_variable(V, Z, U), log_variable_value(X, V, W).

% RULE: record_result(RecordID, final_result).
record_result(X, Y) :- 
	log_entry_template_variable(Z, "{timestamp} {final_result} record {RecordID}", "RecordID", X), log_entry_template_variable(Z, "{timestamp} {final_result} record {RecordID}", "final_result", Y). 
% record_result ANSWER FACTS
record_result("25671466", "ACCEPTED").
record_result("98817547", "ACCEPTED").
record_result("73601975", "UNABLE to determine the validity").
record_result("27888163", "ACCEPTED").
record_result("25220140", "ACCEPTED").
record_result("23408786", "UNABLE to determine the validity").
record_result("18006440", "ACCEPTED").
record_result("14319266", "ACCEPTED").
record_result("90079875", "ACCEPTED").
record_result("17477488", "ACCEPTED").

% RULE: find the set of entry_id for each record: record_entry_set(RecordID, entry_id_start, entry_id_end).
record_entry_set(X, Y, Z) :-
	log_entry_template_variable(Y, "{timestamp} Reading input record {RecordID}", "RecordID", X), log_entry_template_variable(Z, "{timestamp} {final_result} record {RecordID}", "RecordID", X). 
	
% RULE: record_update(RecordID, updated_field_name, old_value, new_value) 
record_update(X, Y, Z, W) :-
	log_entry_template_variable(U, "{timestamp} UPDATING {field_name} from {original_value} to {updated_value}", "field_name", Y), log_entry_template_variable(U, "{timestamp} UPDATING {field_name} from {original_value} to {updated_value}", "original_value", Z), log_entry_template_variable(U, "{timestamp} UPDATING {field_name} from {original_value} to {updated_value}", "updated_value", W), record_entry_set(X, M, N), M<=U, U<=N.
% record_update ANSWER FACTS: record_update(RecordID, updated_field_name, old_value, new_value).
record_update("25671466", "scientificNameAuthorship", "Gmelin, 1791", "(Gmelin, 1791)").
record_update("27888163", "scientificNameAuthorship", " ", "(Gmelin, 1791)").
record_update("18006440", "scientificName", "Placopcten magellanicus", "Placopecten magellanicus").
record_update("18006440", "scientificNameAuthorship", "Gmellin", "(Gmelin, 1791)").
record_update("90079875", "scientificName", "Nodipecten nodsus", "Nodipecten nodosus").
record_update("17477488", "scientificName", "Pecten nodosus", "Nodipecten nodosus").

%FACT: validate_provenance(RecordID, field_name, check_type, source_used, final_result, match_method, match_result). 
validate_provenance(X, Y, Z, U, V, W, K) :-
	record_entry_set(X, M, N), log_entry_template_variable(I, "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}", "check_type", Z), log_entry_template_variable(I, "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}", "source_used", U), log_entry_template_variable(I, "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}", "match_method", W), log_entry_template_variable(I, "{timestamp} Trying {check_type} {source_used} {match_method} match for {field_name}: {original_scientificName}", "field_name", Y), log_entry_template_variable(J, "{timestamp} {match_method} match was {match_result}", "match_method", W), log_entry_template_variable(J, "{timestamp} {match_method} match was {match_result}", "match_result", K), I>=M, I<=N, J>=M, J<=N, record_result(X, V).
% ANSWER FACTS:
validate_provenance("25671466","scientificName","local source","local authority source","ACCEPTED","EXACT","SUCESSFUL").  

